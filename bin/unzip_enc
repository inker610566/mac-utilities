#!/usr/bin/python
#
# Unzip with specific encoding
# Support encoding can be found here:
# https://docs.python.org/2/library/codecs.html#standard-encodings
#

import os
import zipfile
import argparse

def PrepareParser():
    parser = argparse.ArgumentParser(description='unzip file with specific encoding.')
    parser.add_argument('zipfile', metavar='zipfile', type=str,
                         help='the file to be unzip')
    parser.add_argument(metavar='encoding', dest='codec', type=str, nargs='?',
                         help='unzip with specific encoding. If not specific, it will try decode filename with all support encoding. support encoding can be found in https://docs.python.org/2/library/codecs.html#standard-encodings.')
    return parser

if __name__ == '__main__':

    args = PrepareParser().parse_args()

    if args.codec:
        with zipfile.ZipFile(args.zipfile) as z:
            codec = args.codec
            for fileinfo in z.filelist:
                encode_path = fileinfo.filename.decode(codec).encode('utf_8')
                print 'unzip %s ' % encode_path
                path, filename = os.path.split(encode_path)
                if path and not os.path.isdir(path):
                    os.makedirs(path)

                if filename:
                    yn = True
                    if os.path.isfile(encode_path):
                        yn = input('If replace file %s (y/N):' % encode_path)
                        yn = yn.find('y') != -1 or yn.find('Y') != -1
                    if yn:
                        with open(encode_path, 'w') as f:
                            f.write(z.read(fileinfo.filename))
    else:
        codecs = [
         'ascii', 'big5', 'big5hkscs', 'cp037', 'cp424', 'cp437', 'cp500', 'cp720', 'cp737', 'cp775', 'cp850', 'cp852', 'cp855', 'cp856', 'cp857', 'cp858', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'cp869', 'cp874', 'cp875', 'cp932', 'cp949', 'cp950', 'cp1006', 'cp1026', 'cp1140', 'cp1250', 'cp1251', 'cp1252', 'cp1253', 'cp1254', 'cp1255', 'cp1256', 'cp1257', 'cp1258', 'euc_jp', 'euc_jis_2004', 'euc_jisx0213', 'euc_kr', 'gb2312', 'gbk', 'gb18030', 'hz', 'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2', 'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr', 'latin_1', 'iso8859_2', 'iso8859_3', 'iso8859_4', 'iso8859_5', 'iso8859_6', 'iso8859_7', 'iso8859_8', 'iso8859_9', 'iso8859_10', 'iso8859_11', 'iso8859_13', 'iso8859_14', 'iso8859_15', 'iso8859_16', 'johab', 'koi8_r', 'koi8_u', 'mac_cyrillic', 'mac_greek', 'mac_iceland', 'mac_latin2', 'mac_roman', 'mac_turkish', 'ptcp154', 'shift_jis', 'shift_jis_2004', 'shift_jisx0213', 'utf_32', 'utf_32_be', 'utf_32_le', 'utf_16', 'utf_16_be', 'utf_16_le', 'utf_7', 'utf_8', 'utf_8_si'
        ]
        with zipfile.ZipFile(args.zipfile) as z:
            for codec in codecs:
                report = '*** %s ***\n' % codec
                for fileinfo in z.filelist:
                    try:
                        encode_path = fileinfo.filename.decode(codec).encode('utf_8')
                        report += encode_path + '\n'
                    except:
                        break
                else:
                    print report
